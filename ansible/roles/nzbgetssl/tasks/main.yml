---

- name: Remove NZBGET Container
  docker_container:
    name: nzbget
    state: absent

#- name: "Set folder permissions"
#  shell: "chmod -R 777 /mnt/nzbget/"

#- name: "Set owner permisisons"
#  shell: "chown -R 1000:1000 /mnt/nzbget/"

- name: Create nzbget download directory
  file: "path=/mnt/nzbget/ state=directory mode=0777 owner=1000 group=1000"

- name: Check nzbget.conf exists
  stat:
    path: "/opt/appdata/nzbget/nzbget.conf"
  register: nzbget_conf

- name: Deploy NZBGET Container
  docker_container:
    name: nzbget
    image: "hotio/suitarr"
    pull: yes
    cpu_shares: 256
    published_ports:
      - "6789:6789"
    volumes:
      - /opt/appdata/nzbget:/config
      - /mnt/nzbget/completed:/completed
      - /mnt/nzbget/incomplete:/incomplete
      - /mnt/nzbget/nzb:/nzb
      - /mnt/nzbget/log:/log
      - /mnt/nzbget/tmp:/tmp
      - /mnt/nzbget/queue:/queue
      - /mnt/nzbget/scripts:/scripts
      - /mnt/unionfs:/unionfs
      - /etc/localtime:/etc/localtime:ro
    env:
      APP: "nzbget"
      VERSION: "stable"
      PUID: 1000
      PGID: 1000
      VIRTUAL_HOST: "nzbget.{{domain}}"
      VIRTUAL_PORT: 6789
      LETSENCRYPT_HOST: "nzbget.{{domain}}"
      LETSENCRYPT_EMAIL: "{{email}}"
    restart_policy: always
    state: started

- name: Path for .conf
  wait_for:
    path: "/opt/appdata/nzbget/nzbget.conf"
    state: present
  when: nzbget_conf.stat.exists == False

- name: "Wait 12 Seconds"
  wait_for:
    timeout: 10
  when: nzbget_conf.stat.exists == False

- name: Customize nzbget.conf
  docker_container:
    name: nzbget
    state: stopped
  when: nzbget_conf.stat.exists == False

- name: Remove User
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^ControlUsername\s?='
    line: 'ControlUsername='
    state: present
  when: nzbget_conf.stat.exists == False

- name: Remove Password
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^ControlPassword=\s?='
    line: 'ControlPassword='
    state: present
  when: nzbget_conf.stat.exists == False

- name: Change MainDir directory
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^MainDir\s?='
    line: 'MainDir=/config'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Change InterDir directory
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^InterDir\s?='
    line: 'InterDir=/incomplete'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Change DestDir directory
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^DestDir\s?='
    line: 'DestDir=/completed'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Change NZBDir directory
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^NzbDir\s?='
    line: 'NzbDir=/nzb'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Change QueueDir
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^QueueDir\s?='
    line: 'QueueDir=/queue'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Change TempDir
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^TempDir\s?='
    line: 'TempDir=/tmp'
    state: present
  when: nzbget_conf.stat.exists == False

- name: ScriptDir
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^ScriptDir\s?='
    line: 'ScriptDir=scripts/'
    state: present
  when: nzbget_conf.stat.exists == False

- name: LogFile
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^LogFile\s?='
    line: 'LogFile=/log/nzbget.log'
    state: present
  when: nzbget_conf.stat.exists == False

- name: DirectUnpack Set to On
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^DirectUnpack\s?='
    line: 'DirectUnpack=yes'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Lowercase & Set Movie Category
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^Category1.Name\s?='
    line: 'Category1.Name=movies'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Lowercase & Set TV Category
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^Category2.Name\s?='
    line: 'Category2.Name=tv'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Restart Container
  docker_container:
    name: nzbget
    state: started
  when: nzbget_conf.stat.exists == False
